const vnpayService = require('../services/vnpay.service');
const Order = require('../models/Order');
const Payment = require('../models/Payment');

const paymentController = {
  /**
   * T·∫°o URL thanh to√°n VNPay cho ƒë∆°n h√†ng ƒë√£ c√≥ s·∫µn
   */
  createPayment: async (req, res) => {
    console.log('üîç DEBUG req.body:', req.body);
    
    try {
      const { order_id, total, user_id, orderInfo, ipAddr } = req.body;
      
      // L·∫•y IP c·ªßa client
      const clientIp = req.ip || req.connection.remoteAddress || req.socket.remoteAddress || req.connection.socket?.remoteAddress;
      console.log('üåê DEBUG clientIp:', clientIp);
      
      const paymentData = {
        order_id,
        total,
        orderInfo: orderInfo || `Thanh toan don hang ${order_id}`,
        user_id,
        ipAddr: ipAddr || clientIp || '',
        bankCode: '',
        orderType: 'billpayment',
        language: 'vn'
      };
      
      console.log('üìä DEBUG paymentData:', paymentData);
      
      const result = await vnpayService.createPaymentUrl(paymentData);
      
      console.log('‚úÖ Payment URL Result:', result);
      
      if (result.success) {
        res.json({
          success: true,
          orderId: result.orderId,
          vnpTxnRef: result.vnpTxnRef,
          paymentUrl: result.paymentUrl
        });
      } else {
        res.status(400).json({
          success: false,
          message: result.message
        });
      }
    } catch (error) {
      console.error('‚ùå Error in createPaymentUrl:', error);
      res.status(500).json({
        success: false,
        message: 'Internal server error',
        error: error.message
      });
    }
  },

  /**
   * X·ª≠ l√Ω return URL t·ª´ VNPay (khi user quay v·ªÅ t·ª´ trang thanh to√°n)
   */
  processPaymentReturn: async (req, res) => {
    console.log('üîÑ VNPay Return URL called');
    console.log('üìã Query params:', req.query);
    console.log('üåê Headers:', req.headers);
    
    try {
      const returnData = req.query;
      if (!returnData || !returnData.vnp_ResponseCode) {
        return res.status(400).send(`
          <html>
            <head><title>K·∫øt qu·∫£ thanh to√°n</title></head>
            <body>
              <h2>D·ªØ li·ªáu thanh to√°n kh√¥ng h·ª£p l·ªá!</h2>
              <p>Vui l√≤ng quay l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ ki·ªÉm tra ƒë∆°n h√†ng.</p>
            </body>
          </html>
        `);
      }
      
      const vnp_TxnRef = returnData.vnp_TxnRef;
      const orderId = returnData.orderId;
      
      console.log('üì¶ OrderId from URL:', orderId);
      console.log('üì¶ VNPay params:', returnData);
      
      // T√¨m payment record
      const payment = await Payment.findOne({
        order_id: orderId,
        paymentType: 'VNPay'
      });
      
      if (payment) {
        // C·∫≠p nh·∫≠t payment v·ªõi return data
        await Payment.findByIdAndUpdate(payment._id, {
          responseData: {
            ...payment.responseData,
            return: returnData,
            returnTime: new Date().toISOString()
          }
        });
        
        // X·ª≠ l√Ω return data
        returnData.orderId = payment.order_id;
        const handleResult = await vnpayService.handleVNPayCallback(returnData);
        console.log('üîç Handle result:', handleResult);
        
        if (returnData.vnp_ResponseCode === '00') {
          return res.send(`
            <html>
              <head>
                <title>Thanh to√°n th√†nh c√¥ng</title>
                <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  .success { color: #27ae60; }
                  .message { margin: 20px 0; }
                </style>
              </head>
              <body>
                <h2 class="success">‚úì Thanh to√°n th√†nh c√¥ng!</h2>
                <div class="message">
                  <p>ƒê∆°n h√†ng #${payment.order_id} ƒë√£ ƒë∆∞·ª£c thanh to√°n th√†nh c√¥ng.</p>
                  <p>Vui l√≤ng quay l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ ki·ªÉm tra ƒë∆°n h√†ng.</p>
                </div>
                <script>
                  // T·ª± ƒë·ªông ƒë√≥ng tab sau 3 gi√¢y
                  setTimeout(() => {
                    window.close();
                  }, 3000);
                </script>
              </body>
            </html>
          `);
        } else {
          return res.send(`
            <html>
              <head>
                <title>Thanh to√°n th·∫•t b·∫°i</title>
                <style>
                  body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                  .error { color: #e74c3c; }
                  .message { margin: 20px 0; }
                </style>
              </head>
              <body>
                <h2 class="error">‚úó Thanh to√°n th·∫•t b·∫°i</h2>
                <div class="message">
                  <p>ƒê∆°n h√†ng #${payment.order_id} thanh to√°n th·∫•t b·∫°i.</p>
                  <p>Vui l√≤ng quay l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ th·ª≠ l·∫°i.</p>
                </div>
                <script>
                  // T·ª± ƒë·ªông ƒë√≥ng tab sau 3 gi√¢y
                  setTimeout(() => {
                    window.close();
                  }, 3000);
                </script>
              </body>
            </html>
          `);
        }
      } else {
        return res.send(`
          <html>
            <head><title>Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng</title></head>
            <body>
              <h2>Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng!</h2>
              <p>Vui l√≤ng quay l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ ki·ªÉm tra ƒë∆°n h√†ng.</p>
            </body>
          </html>
        `);
      }
    } catch (error) {
      console.error('‚ùå Error in processPaymentReturn:', error);
      return res.status(500).send(`
        <html>
          <head><title>L·ªói x·ª≠ l√Ω thanh to√°n</title></head>
          <body>
            <h2>C√≥ l·ªói x·∫£y ra!</h2>
            <p>Vui l√≤ng quay l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ ki·ªÉm tra ƒë∆°n h√†ng.</p>
          </body>
        </html>
      `);
    }
  },

  verifyPayment: (req, res) => {
    try {
      const vnpParams = req.query;
      if (!vnpParams || Object.keys(vnpParams).length === 0) {
        return res.status(400).json({
          success: false,
          message: 'No payment data provided'
        });
      }
      const result = vnpayService.verifyReturnUrl(vnpParams);
      return res.status(200).json({
        ...vnpParams,
        vnp_Amount: parseInt(vnpParams.vnp_Amount) / 100,
        success: result.isValid && result.isSuccessful,
        message: result.isValid 
          ? (result.isSuccessful ? 'Payment success' : 'Payment failed')
          : 'Invalid payment data'
      });
    } catch (error) {
      console.error('[VNPay] verifyPayment error:', error);
      return res.status(500).json({
        success: false,
        message: 'Error verifying payment'
      });
    }
  },

  processIpn: (req, res) => {
    try {
      const ipnData = req.query;
      const result = vnpayService.processIpn(ipnData);
      return res.status(200).json(result);
    } catch (error) {
      console.error('[VNPay] processIpn error:', error);
      return res.status(500).json({
        RspCode: '99',
        Message: 'Unknown error'
      });
    }
  },

  handleCallback: async (req, res) => {
    console.log('üîÑ VNPay Callback called');
    console.log('üìã Query params:', req.query);
    
    try {
      const callbackData = req.query;
      if (!callbackData || !callbackData.vnp_ResponseCode) {
        return res.status(400).json({
          success: false,
          message: 'D·ªØ li·ªáu callback kh√¥ng h·ª£p l·ªá! Vui l√≤ng quay l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ ki·ªÉm tra ƒë∆°n h√†ng.'
        });
      }
      
      const vnp_TxnRef = callbackData.vnp_TxnRef;
      
      // T√¨m payment record b·∫±ng transaction reference
      const payment = await Payment.findOne({
        paymentType: 'VNPay'
      });
      
      let orderId;
      if (payment) {
        orderId = payment.order_id;
        
        // C·∫≠p nh·∫≠t payment v·ªõi callback data
        await Payment.findByIdAndUpdate(payment._id, {
          responseData: {
            ...payment.responseData,
            callback: callbackData,
            callbackTime: new Date().toISOString()
          }
        });
      
        // X·ª≠ l√Ω callback
        callbackData.orderId = orderId;
        const handleResult = await vnpayService.handleVNPayCallback(callbackData);
        
        if (callbackData.vnp_ResponseCode === '00') {
          return res.status(200).json({
            success: true,
            message: 'Thanh to√°n th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra ƒë∆°n h√†ng trong ·ª©ng d·ª•ng.'
          });
        } else {
          return res.status(200).json({
            success: false,
            message: 'Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy! Vui l√≤ng ki·ªÉm tra ƒë∆°n h√†ng trong ·ª©ng d·ª•ng.'
          });
        }
      } else {        
        // Th·ª≠ t√¨m payment g·∫ßn nh·∫•t n·∫øu kh√¥ng t√¨m th·∫•y
        const recentPayment = await Payment.findOne({
          paymentType: 'VNPay'
        }).sort({ createdAt: -1 });
        
        if (recentPayment) {
          
          // C·∫≠p nh·∫≠t payment v·ªõi callback data
          await Payment.findByIdAndUpdate(recentPayment._id, {
            responseData: {
              ...recentPayment.responseData,
              callback: callbackData,
              callbackTime: new Date().toISOString()
            }
          });
          
          orderId = recentPayment.order_id;
          callbackData.orderId = orderId;
          const handleResult = await vnpayService.handleVNPayCallback(callbackData);
          
          if (callbackData.vnp_ResponseCode === '00') {
            return res.status(200).json({
              success: true,
              message: 'Thanh to√°n th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra ƒë∆°n h√†ng trong ·ª©ng d·ª•ng.'
            });
          } else {
            return res.status(200).json({
              success: false,
              message: 'Thanh to√°n th·∫•t b·∫°i ho·∫∑c b·ªã h·ªßy! Vui l√≤ng ki·ªÉm tra ƒë∆°n h√†ng trong ·ª©ng d·ª•ng.'
            });
          }
        }
        
        return res.status(404).json({
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng li√™n quan callback.'
        });
      }
    } catch (error) {
      console.error('‚ùå Error in handleCallback:', error);
      return res.status(500).json({
        success: false,
        message: 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n! Vui l√≤ng ki·ªÉm tra ƒë∆°n h√†ng trong ·ª©ng d·ª•ng.'
      });
    }
  },

  checkPaymentStatus: async (req, res) => {
    try {
      const { orderId } = req.params;
      
      const payment = await Payment.findOne({
        order_id: orderId,
        paymentType: 'VNPay'
      });

      if (!payment) {
        return res.status(404).json({
          success: false,
          message: 'Payment not found'
        });
      }

      return res.status(200).json({
        success: true,
        payment: {
          id: payment._id,
          orderId: payment.order_id,
          amount: payment.amount,
          status: payment.status,
          paymentType: payment.paymentType,
          transactionRef: payment.transactionRef,
          createdAt: payment.createdAt,
          paymentDate: payment.paymentDate
        }
      });
    } catch (error) {
      console.error('[VNPay] checkPaymentStatus error:', error);
      return res.status(500).json({
        success: false,
        message: 'Error checking payment status'
      });
    }
  }
};

module.exports = paymentController; 