const Admin = require("../models/Admin");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const OtpCode = require("../models/otp.model");
const sendMail = require("../utils/sendMail");

// ƒêƒÇNG K√ù
exports.register = async (req, res) => {
  const { username, password, name, email, phone } = req.body;

  try {
    const existingAdmin = await Admin.findOne({ phone });
    if (existingAdmin) {
      return res.status(400).json({ message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }
    const existingEmail = await Admin.findOne({ email });
    if (existingEmail) {
      return res.status(400).json({ message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
    }
    const existingUsername = await Admin.findOne({ username });
    if (existingUsername) {
      return res.status(400).json({ message: "Username ƒë√£ t·ªìn t·∫°i" });
    }


    const hashedPassword = await bcrypt.hash(password, 10);

    const newAdmin = new Admin({
      username,
      password: hashedPassword,
      name,
      email,
      phone,
    });

    await newAdmin.save();
    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

// // ƒêƒÇNG NH·∫¨P
exports.login = async (req, res) => {
  const { phone, password } = req.body;

  try {
    const admin = await Admin.findOne({ phone });
    if (!admin) return res.status(400).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });

    const isMatch = await bcrypt.compare(password, admin.password);
    if (!isMatch) return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });

    const token = jwt.sign(
      { userId: admin._id, role: admin.role },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );


    res.json({
      token,
      admin: {
        username: admin.username,
        name: admin.name,
        phone: admin.phone,
        email: admin.email,
        role: admin.role,
      },
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
// ƒê·ªîI M·∫¨T KH·∫®U
exports.changePassword = async (req, res) => {
  const { oldPassword, newPassword } = req.body;
  const adminId = req.user.userId; // L·∫•y t·ª´ middleware x√°c th·ª±c

  try {
    const admin = await Admin.findById(adminId);
    if (!admin) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y admin" });

    const isMatch = await bcrypt.compare(oldPassword, admin.password);
    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng" });
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);
    admin.password = hashedPassword;
    await admin.save();

    res.json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};
const generateOTP = () => Math.floor(100000 + Math.random() * 900000).toString();

exports.sendAdminOtp = async (req, res) => {
  const normEmail = String(req.body.email || '').trim().toLowerCase();
  if (!normEmail) return res.status(400).json({ message: "Email l√† b·∫Øt bu·ªôc" });

  // üîç Cho ph√©p t√¨m ·ªü Admin ho·∫∑c User
  let account = await Admin.findOne({ email: normEmail });
  if (!account && User) {
    account = await User.findOne({ email: normEmail });
  }
  if (!account) {
    return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng" });
  }

  const code = generateOTP();
  const expiresAt = new Date(Date.now() + 5 * 60 * 1000);

  try {
    // ‚ö†Ô∏è D√πng $set + $setOnInsert ƒë·ªÉ kh√¥ng l√†m m·∫•t email
    await OtpCode.findOneAndUpdate(
      { email: normEmail },
      {
        $set: { code, expiresAt },
        $setOnInsert: { email: normEmail },
      },
      { upsert: true, new: true }
    );

    const html = `
      <h2>M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</h2>
      <h3>${code}</h3>
      <p>M√£ c√≥ hi·ªáu l·ª±c trong 5 ph√∫t. Kh√¥ng chia s·∫ª v·ªõi b·∫•t k·ª≥ ai.</p>
    `;

    await sendMail(normEmail, "M√£ OTP x√°c minh ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u", html);
    return res.json({ message: "‚úÖ M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email" });
  } catch (error) {
    console.error("sendAdminOtp error:", error);
    return res.status(500).json({ message: "L·ªói khi g·ª≠i OTP" });
  }
};

// === X√ÅC NH·∫¨N OTP & ƒê·∫∂T L·∫†I M·∫¨T KH·∫®U ===
exports.resetAdminPassword = async (req, res) => {
  const normEmail = String(req.body.email || '').trim().toLowerCase();
  const code = String(req.body.code || '').trim();
  const newPassword = req.body.newPassword;

  if (!normEmail || !code || !newPassword) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });
  }

  try {
    const otpRecord = await OtpCode.findOne({ email: normEmail });
    if (!otpRecord || otpRecord.code !== code) {
      return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá" });
    }
    if (otpRecord.expiresAt < new Date()) {
      return res.status(400).json({ message: "OTP ƒë√£ h·∫øt h·∫°n" });
    }

    // üîç T√¨m t√†i kho·∫£n ·ªü Admin ho·∫∑c User
    let target = await Admin.findOne({ email: normEmail });
    let isAdmin = true;
    if (!target && User) {
      target = await User.findOne({ email: normEmail });
      isAdmin = false;
    }
    if (!target) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });

    const hashed = await bcrypt.hash(newPassword, 10);
    target.password = hashed;
    await target.save();

    await OtpCode.deleteOne({ email: normEmail });

    // Tu·ª≥ √Ω tr·∫£ kh√°c nhau n·∫øu c·∫ßn
    return res.json({ message: "‚úÖ ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.error("resetAdminPassword error:", error);
    return res.status(500).json({ message: "L·ªói h·ªá th·ªëng" });
  }
};
